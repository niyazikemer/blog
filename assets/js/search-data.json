{
  
    
        "post0": {
            "title": "Chapter 5",
            "content": ". This is my cyberman caffee cup, as I remember got it from Manchester Science Museum. . import fastbook fastbook.setup_book() %config Completer.use_jedi = False . from fastbook import * . [[chapter_pet_breeds]] . PLAYING WITH THE DATASET . from fastai.vision.all import * path = untar_data(URLs.PETS) . . Note: With untar we download the data. This data originally come from Oxford University Visual Geomety Group and our data set is here: . path . Path(&#39;/home/niyazi/.fastai/data/oxford-iiit-pet&#39;) . . Note: This is local download path for my computer. . Path.BASE_PATH = path . . Tip: This is a trick to get relative path, check above and below . path . Path(&#39;.&#39;) . Now the path is like above . path.ls() . (#2) [Path(&#39;annotations&#39;),Path(&#39;images&#39;)] . . Note: &#8217;#2&#8217; is number of item in the list. annotations represents target variables of this datasets but we do not use them at this time instead we create our own labels. . (path/&quot;images&quot;).ls() . (#7393) [Path(&#39;images/staffordshire_bull_terrier_90.jpg&#39;),Path(&#39;images/Russian_Blue_70.jpg&#39;),Path(&#39;images/japanese_chin_69.jpg&#39;),Path(&#39;images/Maine_Coon_266.jpg&#39;),Path(&#39;images/japanese_chin_200.jpg&#39;),Path(&#39;images/Siamese_57.jpg&#39;),Path(&#39;images/Persian_175.jpg&#39;),Path(&#39;images/havanese_81.jpg&#39;),Path(&#39;images/Birman_72.jpg&#39;),Path(&#39;images/leonberger_55.jpg&#39;)...] . fname = (path/&quot;images&quot;).ls()[0] . fname . Path(&#39;images/staffordshire_bull_terrier_90.jpg&#39;) . . Note: The first image in the path list. . re.findall(r&#39;(.+)_ d+.jpg$&#39;, fname.name) . [&#39;staffordshire_bull_terrier&#39;] . . Note: Since we don&#8217;t use the annonations in the Dataset we need to find a way to get breeds form the filename. This is regex findall method, Check regular expression tutorial here . pets = DataBlock(blocks = (ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(seed=42), get_y=using_attr(RegexLabeller(r&#39;(.+)_ d+.jpg$&#39;), &#39;name&#39;), item_tfms=Resize(460), batch_tfms=aug_transforms(size=224, min_scale=0.75)) dls = pets.dataloaders(path/&quot;images&quot;) . /home/niyazi/anaconda3/envs/fastbook/lib/python3.8/site-packages/torch/_tensor.py:1023: UserWarning: torch.solve is deprecated in favor of torch.linalg.solveand will be removed in a future PyTorch release. torch.linalg.solve has its arguments reversed and does not return the LU factorization. To get the LU factorization see torch.lu, which can be used with torch.lu_solve or torch.lu_unpack. X = torch.solve(B, A).solution should be replaced with X = torch.linalg.solve(A, B) (Triggered internally at /opt/conda/conda-bld/pytorch_1623448278899/work/aten/src/ATen/native/BatchLinearAlgebra.cpp:760.) ret = func(*args, **kwargs) . . Note: now find all names with RegexLabeller. the item_tmsf and batch_transfdrms that looks a bit intereresting, . type(dls) . fastai.data.core.DataLoaders . PRESIZING . check the original document for the idea . As a summary FastAi gives a chance to augment our images in a smarter way such that provide much more detail and information for the taining. . #caption A comparison of fastai&#39;s data augmentation strategy (left) and the traditional approach (right). dblock1 = DataBlock(blocks=(ImageBlock(), CategoryBlock()), get_y=parent_label, item_tfms=Resize(460)) # Place an image in the &#39;images/grizzly.jpg&#39; subfolder where this notebook is located before running this dls1 = dblock1.dataloaders([(Path.cwd()/&#39;images&#39;/&#39;chapter-05&#39;/&#39;grizzly.jpg&#39;)]*100, bs=8) dls1.train.get_idxs = lambda: Inf.ones x,y = dls1.valid.one_batch() _,axs = subplots(1, 2) x1 = TensorImage(x.clone()) x1 = x1.affine_coord(sz=224) x1 = x1.rotate(draw=30, p=1.) x1 = x1.zoom(draw=1.2, p=1.) x1 = x1.warp(draw_x=-0.2, draw_y=0.2, p=1.) tfms = setup_aug_tfms([Rotate(draw=30, p=1, size=224), Zoom(draw=1.2, p=1., size=224), Warp(draw_x=-0.2, draw_y=0.2, p=1., size=224)]) x = Pipeline(tfms)(x) #x.affine_coord(coord_tfm=coord_tfm, sz=size, mode=mode, pad_mode=pad_mode) TensorImage(x[0]).show(ctx=axs[0]) TensorImage(x1[0]).show(ctx=axs[1]); . dls.show_batch(nrows=3, ncols=3) . pets1 = DataBlock(blocks = (ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(seed=42), get_y=using_attr(RegexLabeller(r&#39;(.+)_ d+.jpg$&#39;), &#39;name&#39;)) pets1.summary(path/&quot;images&quot;) . Setting-up type transforms pipelines Collecting items from /home/niyazi/.fastai/data/oxford-iiit-pet/images Found 7390 items 2 datasets of sizes 5912,1478 Setting up Pipeline: PILBase.create Setting up Pipeline: partial -&gt; Categorize -- {&#39;vocab&#39;: None, &#39;sort&#39;: True, &#39;add_na&#39;: False} Building one sample Pipeline: PILBase.create starting from /home/niyazi/.fastai/data/oxford-iiit-pet/images/British_Shorthair_110.jpg applying PILBase.create gives PILImage mode=RGB size=500x333 Pipeline: partial -&gt; Categorize -- {&#39;vocab&#39;: None, &#39;sort&#39;: True, &#39;add_na&#39;: False} starting from /home/niyazi/.fastai/data/oxford-iiit-pet/images/British_Shorthair_110.jpg applying partial gives British_Shorthair applying Categorize -- {&#39;vocab&#39;: None, &#39;sort&#39;: True, &#39;add_na&#39;: False} gives TensorCategory(4) Final sample: (PILImage mode=RGB size=500x333, TensorCategory(4)) Collecting items from /home/niyazi/.fastai/data/oxford-iiit-pet/images Found 7390 items 2 datasets of sizes 5912,1478 Setting up Pipeline: PILBase.create Setting up Pipeline: partial -&gt; Categorize -- {&#39;vocab&#39;: None, &#39;sort&#39;: True, &#39;add_na&#39;: False} Setting up after_item: Pipeline: ToTensor Setting up before_batch: Pipeline: Setting up after_batch: Pipeline: IntToFloatTensor -- {&#39;div&#39;: 255.0, &#39;div_mask&#39;: 1} Building one batch Applying item_tfms to the first sample: Pipeline: ToTensor starting from (PILImage mode=RGB size=500x333, TensorCategory(4)) applying ToTensor gives (TensorImage of size 3x333x500, TensorCategory(4)) Adding the next 3 samples No before_batch transform to apply Collating items in a batch Error! It&#39;s not possible to collate your items in a batch Could not collate the 0-th members of your tuples because got the following shapes torch.Size([3, 333, 500]),torch.Size([3, 500, 396]),torch.Size([3, 375, 500]),torch.Size([3, 500, 281]) . RuntimeError Traceback (most recent call last) &lt;ipython-input-19-8c0a3d421ca2&gt; in &lt;module&gt; 4 splitter=RandomSplitter(seed=42), 5 get_y=using_attr(RegexLabeller(r&#39;(.+)_ d+.jpg$&#39;), &#39;name&#39;)) -&gt; 6 pets1.summary(path/&#34;images&#34;) ~/anaconda3/envs/fastbook/lib/python3.8/site-packages/fastai/data/block.py in summary(self, source, bs, show_batch, **kwargs) 188 why = _find_fail_collate(s) 189 print(&#34;Make sure all parts of your samples are tensors of the same size&#34; if why is None else why) --&gt; 190 raise e 191 192 if len([f for f in dls.train.after_batch.fs if f.name != &#39;noop&#39;])!=0: ~/anaconda3/envs/fastbook/lib/python3.8/site-packages/fastai/data/block.py in summary(self, source, bs, show_batch, **kwargs) 182 print(&#34; nCollating items in a batch&#34;) 183 try: --&gt; 184 b = dls.train.create_batch(s) 185 b = retain_types(b, s[0] if is_listy(s) else s) 186 except Exception as e: ~/anaconda3/envs/fastbook/lib/python3.8/site-packages/fastai/data/load.py in create_batch(self, b) 141 elif s is None: return next(self.it) 142 else: raise IndexError(&#34;Cannot index an iterable dataset numerically - must use `None`.&#34;) --&gt; 143 def create_batch(self, b): return (fa_collate,fa_convert)[self.prebatched](b) 144 def do_batch(self, b): return self.retain(self.create_batch(self.before_batch(b)), b) 145 def to(self, device): self.device = device ~/anaconda3/envs/fastbook/lib/python3.8/site-packages/fastai/data/load.py in fa_collate(t) 48 b = t[0] 49 return (default_collate(t) if isinstance(b, _collate_types) &gt; 50 else type(t[0])([fa_collate(s) for s in zip(*t)]) if isinstance(b, Sequence) 51 else default_collate(t)) 52 ~/anaconda3/envs/fastbook/lib/python3.8/site-packages/fastai/data/load.py in &lt;listcomp&gt;(.0) 48 b = t[0] 49 return (default_collate(t) if isinstance(b, _collate_types) &gt; 50 else type(t[0])([fa_collate(s) for s in zip(*t)]) if isinstance(b, Sequence) 51 else default_collate(t)) 52 ~/anaconda3/envs/fastbook/lib/python3.8/site-packages/fastai/data/load.py in fa_collate(t) 47 &#34;A replacement for PyTorch `default_collate` which maintains types and handles `Sequence`s&#34; 48 b = t[0] &gt; 49 return (default_collate(t) if isinstance(b, _collate_types) 50 else type(t[0])([fa_collate(s) for s in zip(*t)]) if isinstance(b, Sequence) 51 else default_collate(t)) ~/anaconda3/envs/fastbook/lib/python3.8/site-packages/torch/utils/data/_utils/collate.py in default_collate(batch) 54 storage = elem.storage()._new_shared(numel) 55 out = elem.new(storage) &gt; 56 return torch.stack(batch, 0, out=out) 57 elif elem_type.__module__ == &#39;numpy&#39; and elem_type.__name__ != &#39;str_&#39; 58 and elem_type.__name__ != &#39;string_&#39;: ~/anaconda3/envs/fastbook/lib/python3.8/site-packages/fastai/torch_core.py in __torch_function__(self, func, types, args, kwargs) 338 convert=False 339 if _torch_handled(args, self._opt, func): convert,types = type(self),(torch.Tensor,) --&gt; 340 res = super().__torch_function__(func, types, args=args, kwargs=kwargs) 341 if convert: res = convert(res) 342 if isinstance(res, TensorBase): res.set_meta(self, as_copy=True) ~/anaconda3/envs/fastbook/lib/python3.8/site-packages/torch/_tensor.py in __torch_function__(cls, func, types, args, kwargs) 1021 1022 with _C.DisableTorchFunction(): -&gt; 1023 ret = func(*args, **kwargs) 1024 return _convert(ret, cls) 1025 RuntimeError: stack expects each tensor to be equal size, but got [3, 333, 500] at entry 0 and [3, 500, 396] at entry 1 . . Note: It is alway good to get a quick summary. Check the summary above. It is natural to get an error in this example because we are trying the put diffent sized images into the same DataBlock. . Baseline model . learn = cnn_learner(dls, resnet34, metrics=error_rate) learn.fine_tune(2) . /home/niyazi/anaconda3/envs/fastbook/lib/python3.8/site-packages/torch/nn/functional.py:718: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at /opt/conda/conda-bld/pytorch_1623448278899/work/c10/core/TensorImpl.h:1156.) return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode) . epoch train_loss valid_loss error_rate time . 0 | 1.457605 | 0.352995 | 0.105548 | 00:21 | . epoch train_loss valid_loss error_rate time . 0 | 0.497642 | 0.349454 | 0.112314 | 00:26 | . 1 | 0.317850 | 0.240670 | 0.079161 | 00:26 | . . Note: A basic run is helpful as baseline for the beginning. . Defaults for the baseline . learn.loss_func . FlattenedLoss of CrossEntropyLoss() . learn.lr . 0.001 . . Tip: Very easy to see default arguments for the learner. Above loss function loss_func and learning rate lr. . One Batch Run . first(dls.train) . (TensorImage([[[[-0.2266, 0.0924, 0.5782, ..., -0.5764, -0.5718, -0.6178], [ 0.0232, -0.3636, -0.1483, ..., -0.4050, -0.6272, -0.8132], [-0.4864, -0.1169, 0.0829, ..., -0.1269, -0.3616, -0.3792], ..., [-1.3950, -1.4344, -1.3271, ..., -0.2968, 0.1796, 0.4601], [-1.3216, -1.4117, -1.2814, ..., -0.1971, 0.2348, 0.3410], [-1.1776, -1.1273, -1.1513, ..., -0.3427, -0.0638, 0.4218]], [[-0.1022, 0.1950, 0.6573, ..., -0.5845, -0.5961, -0.6692], [ 0.1658, -0.2557, -0.0520, ..., -0.3826, -0.6528, -0.7897], [-0.3518, 0.0344, 0.1975, ..., -0.0251, -0.3143, -0.3295], ..., [-1.2658, -1.2947, -1.2050, ..., -0.4220, -0.0421, 0.2915], [-1.1631, -1.2514, -1.1414, ..., -0.3039, 0.0126, 0.1567], [-1.0169, -0.9665, -1.0053, ..., -0.5230, -0.3099, 0.2061]], [[-1.1227, -0.6550, -0.0869, ..., -0.7543, -0.8071, -0.9924], [-0.5877, -1.0459, -0.7698, ..., -0.7367, -1.1292, -1.2439], [-1.2436, -0.8339, -0.5018, ..., -0.3217, -0.7957, -0.7458], ..., [-0.9324, -0.9629, -0.8775, ..., -0.6470, -0.3521, -0.1968], [-0.8359, -0.9001, -0.7973, ..., -0.5029, -0.2578, -0.3648], [-0.6391, -0.5983, -0.6269, ..., -0.6719, -0.6320, -0.2254]]], [[[ 2.2174, 2.2118, 2.2054, ..., 2.0784, 2.0190, 1.9585], [ 2.2221, 2.2112, 2.2346, ..., 2.0054, 2.0040, 2.0084], [ 2.2054, 2.2484, 2.2001, ..., 1.9903, 1.9759, 1.9894], ..., [ 0.2509, 0.2572, 0.1422, ..., 0.8988, 1.1041, 1.2202], [ 0.1801, 0.1861, 0.1356, ..., 0.8231, 1.1389, 1.1324], [ 0.0790, 0.0998, 0.1002, ..., 1.0476, 1.1044, 1.0087]], [[ 1.5703, 1.5135, 1.4927, ..., 2.2542, 2.1935, 2.1147], [ 1.5696, 1.5311, 1.5278, ..., 2.1783, 2.1782, 2.1657], [ 1.5605, 1.5751, 1.5229, ..., 2.1580, 2.1495, 2.1468], ..., [ 0.4289, 0.4407, 0.3305, ..., 0.8618, 1.0866, 1.1291], [ 0.3729, 0.3681, 0.3163, ..., 0.7571, 1.0828, 1.0565], [ 0.2897, 0.2842, 0.2802, ..., 0.9684, 1.0572, 1.0051]], [[ 1.6357, 1.6165, 1.5757, ..., 2.4253, 2.3730, 2.2892], [ 1.6667, 1.6436, 1.6403, ..., 2.3510, 2.3510, 2.3388], [ 1.6558, 1.6746, 1.6355, ..., 2.3311, 2.3228, 2.3202], ..., [ 0.9673, 0.9759, 0.8610, ..., 1.2758, 1.4839, 1.5532], [ 0.8991, 0.8942, 0.8423, ..., 1.1878, 1.5066, 1.4823], [ 0.8157, 0.8102, 0.8062, ..., 1.4008, 1.4832, 1.4325]]], [[[ 1.1397, 1.3521, 1.2327, ..., 2.2489, 2.2489, 2.2489], [ 1.4178, 1.2977, 1.2602, ..., 2.2489, 2.2489, 2.2489], [ 1.2614, 1.3578, 1.0266, ..., 2.2489, 2.2489, 2.2489], ..., [ 0.4187, 0.2601, 0.3229, ..., 0.4031, 0.5636, 0.4564], [ 0.3590, 0.4880, 0.1613, ..., 0.1032, 0.3089, 0.2724], [-0.0156, -0.3415, -0.2935, ..., 0.3555, 0.6297, 0.5316]], [[ 0.8097, 1.0088, 0.8858, ..., 2.4286, 2.4286, 2.4286], [ 1.1535, 1.0529, 0.9897, ..., 2.4286, 2.4286, 2.4286], [ 1.0050, 1.1928, 0.7689, ..., 2.4286, 2.4286, 2.4286], ..., [ 0.3285, 0.4002, 0.5532, ..., 0.4749, 0.6394, 0.5945], [ 0.2400, 0.4702, 0.3548, ..., 0.3793, 0.5678, 0.4903], [ 0.2402, -0.2420, -0.1402, ..., 0.6913, 0.8976, 0.6348]], [[ 0.7735, 0.9348, 0.8268, ..., 2.6400, 2.6400, 2.6400], [ 1.1048, 0.9983, 0.9523, ..., 2.6400, 2.6400, 2.6400], [ 0.9359, 1.1442, 0.7371, ..., 2.6400, 2.6400, 2.6400], ..., [-0.4805, -0.4741, -0.5401, ..., -0.2237, -0.1730, -0.3652], [-0.5305, -0.1484, -0.5952, ..., -0.4825, -0.3270, -0.4845], [-0.7157, -0.8369, -0.7870, ..., -0.3394, -0.0924, -0.3041]]], ..., [[[ 0.6762, 0.7009, 0.7739, ..., -0.4980, -0.1313, 0.5222], [ 0.8217, 0.8357, 0.8446, ..., -0.8577, -0.1905, 0.5023], [ 0.4468, 0.4755, 0.5268, ..., -1.0772, -0.3543, 0.4905], ..., [-0.6454, -0.5627, -0.5150, ..., 2.0812, 2.0514, 2.0341], [-0.0787, -0.1576, -0.1801, ..., 2.1417, 2.1295, 2.1055], [ 0.5441, 0.5175, 0.5080, ..., 2.1460, 2.1554, 2.1396]], [[ 0.9610, 0.9802, 1.0491, ..., 0.0944, 0.1381, 0.8091], [ 1.1108, 1.1287, 1.1111, ..., -0.0038, 0.1177, 0.7570], [ 0.7140, 0.7202, 0.8425, ..., -0.1800, 0.0147, 0.7098], ..., [-0.5697, -0.5219, -0.4768, ..., 2.2492, 2.2166, 2.1945], [ 0.1560, 0.1268, 0.0783, ..., 2.3099, 2.2900, 2.2643], [ 0.8107, 0.7798, 0.7564, ..., 2.3125, 2.3170, 2.3051]], [[ 0.4869, 0.5194, 0.6384, ..., -0.4391, -0.1730, 0.4437], [ 0.6270, 0.6299, 0.6458, ..., -0.3635, -0.1329, 0.4433], [ 0.3398, 0.4150, 0.4164, ..., -0.5037, -0.2477, 0.4004], ..., [-0.5743, -0.5414, -0.4420, ..., 2.4765, 2.4574, 2.4613], [-0.1537, -0.2133, -0.2288, ..., 2.5404, 2.5268, 2.5028], [ 0.4442, 0.4069, 0.3998, ..., 2.5429, 2.5504, 2.5340]]], [[[ 2.1965, 2.1965, 2.1965, ..., 2.1965, 2.1965, 2.1965], [ 2.1965, 2.1965, 2.1965, ..., 2.1965, 2.1965, 2.1965], [ 2.1976, 2.1965, 2.1965, ..., 2.1933, 2.1911, 2.1941], ..., [-1.1180, -1.2628, 0.0997, ..., 0.1590, 0.2556, 0.1975], [-1.2646, -1.2373, 0.0793, ..., 0.1242, 0.1644, 0.1409], [-0.0781, 0.0492, 0.9857, ..., 0.9676, 0.9769, 0.9792]], [[ 2.3184, 2.3184, 2.3184, ..., 2.3184, 2.3184, 2.3184], [ 2.3184, 2.3184, 2.3184, ..., 2.3184, 2.3184, 2.3184], [ 2.3198, 2.3184, 2.3184, ..., 2.3188, 2.3222, 2.3207], ..., [-0.7434, -0.9782, 0.2437, ..., 0.0859, 0.1689, 0.1356], [-0.9342, -0.9773, 0.2360, ..., 0.0101, 0.0735, 0.0720], [ 0.2098, 0.3091, 1.1561, ..., 0.9915, 0.9983, 1.0105]], [[ 2.5152, 2.5152, 2.5152, ..., 2.5152, 2.5152, 2.5152], [ 2.5152, 2.5152, 2.5152, ..., 2.5152, 2.5152, 2.5152], [ 2.5166, 2.5106, 2.5152, ..., 2.5122, 2.5089, 2.5061], ..., [-0.6437, -0.8183, 0.5476, ..., 0.1002, 0.2330, 0.1557], [-0.8040, -0.7877, 0.5494, ..., 0.0414, 0.1183, 0.0849], [ 0.3250, 0.4886, 1.4396, ..., 1.0575, 1.1062, 1.0886]]], [[[ 2.2489, 2.2489, 2.2489, ..., 1.9533, 1.9501, 1.9625], [ 2.2489, 2.2489, 2.2489, ..., 1.9536, 1.9436, 1.9584], [ 2.2375, 2.2489, 2.2489, ..., 1.9500, 1.9499, 1.9388], ..., [-0.0400, -0.1476, -0.4885, ..., 0.3688, 0.3621, -0.1469], [-0.0883, -0.4321, -0.6174, ..., 0.3131, 0.1516, -0.0280], [-0.2443, -0.6539, -0.6298, ..., -0.0829, -0.3205, -0.2149]], [[ 2.4286, 2.4286, 2.4286, ..., 2.2658, 2.2658, 2.2658], [ 2.4286, 2.4286, 2.4286, ..., 2.2547, 2.2581, 2.2616], [ 2.4169, 2.4286, 2.4286, ..., 2.2657, 2.2656, 2.2523], ..., [ 0.4061, 0.2524, -0.1485, ..., 0.8822, 0.9233, 0.4268], [ 0.3362, -0.0740, -0.3210, ..., 0.8277, 0.6810, 0.5196], [ 0.1552, -0.3107, -0.3124, ..., 0.4114, 0.1963, 0.3132]], [[ 2.6400, 2.6400, 2.6400, ..., 2.6400, 2.6400, 2.6400], [ 2.6400, 2.6400, 2.6400, ..., 2.6400, 2.6400, 2.6334], [ 2.6284, 2.6400, 2.6400, ..., 2.6400, 2.6400, 2.6153], ..., [ 0.8890, 0.7037, 0.3229, ..., 0.4421, 0.4107, -0.2115], [ 0.8040, 0.3125, 0.0616, ..., 0.3078, 0.1667, -0.0925], [ 0.5877, 0.0209, -0.0542, ..., -0.1501, -0.3464, -0.2601]]]], device=&#39;cuda:0&#39;), TensorCategory([25, 4, 27, 20, 12, 27, 31, 33, 14, 35, 16, 5, 22, 33, 3, 35, 3, 0, 32, 12, 1, 20, 18, 22, 15, 11, 13, 5, 35, 4, 22, 34, 15, 4, 3, 21, 5, 22, 27, 11, 15, 13, 14, 32, 13, 4, 7, 30, 9, 20, 7, 20, 9, 1, 6, 35, 23, 8, 14, 16, 18, 6, 2, 35], device=&#39;cuda:0&#39;)) . . Note: above and below is same . x,y = dls.one_batch() . Understanding Labels . dls.vocab . [&#39;Abyssinian&#39;, &#39;Bengal&#39;, &#39;Birman&#39;, &#39;Bombay&#39;, &#39;British_Shorthair&#39;, &#39;Egyptian_Mau&#39;, &#39;Maine_Coon&#39;, &#39;Persian&#39;, &#39;Ragdoll&#39;, &#39;Russian_Blue&#39;, &#39;Siamese&#39;, &#39;Sphynx&#39;, &#39;american_bulldog&#39;, &#39;american_pit_bull_terrier&#39;, &#39;basset_hound&#39;, &#39;beagle&#39;, &#39;boxer&#39;, &#39;chihuahua&#39;, &#39;english_cocker_spaniel&#39;, &#39;english_setter&#39;, &#39;german_shorthaired&#39;, &#39;great_pyrenees&#39;, &#39;havanese&#39;, &#39;japanese_chin&#39;, &#39;keeshond&#39;, &#39;leonberger&#39;, &#39;miniature_pinscher&#39;, &#39;newfoundland&#39;, &#39;pomeranian&#39;, &#39;pug&#39;, &#39;saint_bernard&#39;, &#39;samoyed&#39;, &#39;scottish_terrier&#39;, &#39;shiba_inu&#39;, &#39;staffordshire_bull_terrier&#39;, &#39;wheaten_terrier&#39;, &#39;yorkshire_terrier&#39;] . dls.vocab[0] . &#39;Abyssinian&#39; . . Tip: vocab gives as all labels as text. . . y . TensorCategory([25, 4, 27, 20, 12, 27, 31, 33, 14, 35, 16, 5, 22, 33, 3, 35, 3, 0, 32, 12, 1, 20, 18, 22, 15, 11, 13, 5, 35, 4, 22, 34, 15, 4, 3, 21, 5, 22, 27, 11, 15, 13, 14, 32, 13, 4, 7, 30, 9, 20, 7, 20, 9, 1, 6, 35, 23, 8, 14, 16, 18, 6, 2, 35], device=&#39;cuda:0&#39;) . . Note: Targets as coded. . x . TensorImage([[[[-1.5782, -1.7255, -1.9275, ..., -1.6330, -1.6380, -1.5983], [-1.8080, -1.7849, -1.8237, ..., -1.6854, -1.6497, -1.6160], [-1.7805, -1.9846, -1.8070, ..., -1.7872, -1.7422, -1.7448], ..., [ 0.2610, 0.0782, 0.2825, ..., -1.0197, -0.7567, -0.5126], [ 0.2102, 0.3495, 0.4070, ..., -0.9104, -0.2978, -0.3182], [ 0.1073, 0.2460, 0.3919, ..., -0.5615, -0.0283, -0.0868]], [[-1.4595, -1.5448, -1.7839, ..., -1.8157, -1.8280, -1.7952], [-1.7047, -1.5924, -1.6316, ..., -1.8512, -1.8226, -1.7953], [-1.7188, -1.8761, -1.6515, ..., -1.9263, -1.8895, -1.9038], ..., [-0.4721, -0.7089, -0.4992, ..., -1.3913, -1.0786, -0.9552], [-0.5585, -0.4309, -0.3815, ..., -1.4235, -0.8120, -0.9214], [-0.7029, -0.5853, -0.4174, ..., -1.0932, -0.6124, -0.6962]], [[-1.1973, -1.3697, -1.6175, ..., -1.7907, -1.8010, -1.7709], [-1.4681, -1.4134, -1.4861, ..., -1.7464, -1.7152, -1.7191], [-1.5637, -1.6988, -1.4662, ..., -1.7666, -1.7444, -1.7682], ..., [-1.2066, -1.3297, -1.1746, ..., -1.6103, -1.4198, -1.2882], [-1.3006, -1.1145, -1.1057, ..., -1.6737, -1.2692, -1.4072], [-1.4957, -1.3560, -1.2036, ..., -1.4585, -1.1765, -1.1848]]], [[[-1.7820, -1.9489, -1.9293, ..., -1.6559, -1.6432, -1.6859], [-1.9244, -1.9320, -1.9597, ..., -1.6276, -1.6746, -1.7982], [-1.9630, -1.9279, -1.9613, ..., -1.4771, -1.5710, -1.8166], ..., [-0.8411, -1.0456, -0.9465, ..., -0.5607, -0.6603, -0.5067], [-0.8964, -1.0072, -0.9543, ..., -0.5665, -0.6530, -0.5676], [-0.9599, -0.8790, -0.8812, ..., -0.5524, -0.6647, -0.5732]], [[-1.4559, -1.4538, -1.4531, ..., -1.2001, -1.1993, -1.2830], [-1.6392, -1.6134, -1.6622, ..., -1.1939, -1.2060, -1.3921], [-1.7120, -1.6618, -1.6668, ..., -0.8947, -1.0194, -1.4055], ..., [-0.8173, -1.0451, -0.9468, ..., -0.5976, -0.6683, -0.4381], [-0.8926, -1.0171, -0.9548, ..., -0.5863, -0.6705, -0.5175], [-0.9463, -0.8748, -0.8748, ..., -0.5512, -0.6933, -0.5853]], [[-1.5378, -1.6311, -1.5977, ..., -1.3791, -1.4316, -1.5195], [-1.6639, -1.6371, -1.6675, ..., -1.3928, -1.4238, -1.5687], [-1.6774, -1.6761, -1.6964, ..., -1.2101, -1.2724, -1.5873], ..., [-0.8061, -1.0749, -1.0046, ..., -0.5527, -0.5710, -0.3876], [-0.9161, -1.0609, -1.0079, ..., -0.5460, -0.5744, -0.4814], [-0.9639, -0.8964, -0.8677, ..., -0.5031, -0.6251, -0.5603]]], [[[ 0.6906, 0.6906, 0.6906, ..., 0.9590, 0.9276, 0.8906], [ 0.6906, 0.6906, 0.6906, ..., 0.9589, 0.9189, 0.8735], [ 0.6906, 0.6906, 0.6906, ..., 0.9538, 0.9164, 0.8684], ..., [-0.4028, -0.3433, -0.1191, ..., 0.5748, 0.4810, 0.4673], [-0.3511, -0.5720, -0.4707, ..., 0.5027, 0.3823, 0.3188], [-0.3911, -0.4620, -0.3929, ..., 0.3500, 0.2800, 0.1875]], [[ 1.1506, 1.1506, 1.1506, ..., 1.4250, 1.3929, 1.3551], [ 1.1506, 1.1506, 1.1506, ..., 1.4249, 1.3840, 1.3376], [ 1.1506, 1.1506, 1.1506, ..., 1.4197, 1.3814, 1.3323], ..., [ 0.0503, 0.1112, 0.3403, ..., 1.1022, 1.0063, 0.9924], [ 0.1032, -0.1227, -0.0192, ..., 1.0285, 0.9055, 0.8405], [ 0.0623, -0.0102, 0.0605, ..., 0.8725, 0.8009, 0.7063]], [[ 1.6117, 1.6117, 1.6117, ..., 1.8849, 1.8529, 1.8153], [ 1.6117, 1.6117, 1.6117, ..., 1.8848, 1.8441, 1.7979], [ 1.6117, 1.6117, 1.6117, ..., 1.8796, 1.8415, 1.7927], ..., [ 0.3943, 0.4549, 0.6830, ..., 1.6856, 1.5901, 1.5762], [ 0.4469, 0.2221, 0.3252, ..., 1.6122, 1.4897, 1.4250], [ 0.4063, 0.3341, 0.4044, ..., 1.4568, 1.3856, 1.2914]]], ..., [[[-0.5196, -0.5197, -0.5451, ..., -2.0065, -2.0076, -2.0088], [-0.5135, -0.5196, -0.5196, ..., -2.0771, -2.0979, -2.0876], [-0.5316, -0.5192, -0.5172, ..., -2.1020, -2.0984, -2.0986], ..., [ 1.4879, 1.4130, 1.4058, ..., 1.7026, 1.8280, 1.7787], [ 1.5481, 1.4748, 1.4955, ..., 1.6920, 1.8589, 1.5870], [ 1.4713, 1.4184, 1.3510, ..., 1.7348, 1.7966, 1.7859]], [[-0.8899, -0.9241, -0.9625, ..., -1.9051, -1.9062, -1.9074], [-0.8837, -0.9148, -0.9336, ..., -1.9797, -1.9948, -1.9885], [-0.9023, -0.9015, -0.9107, ..., -2.0071, -2.0027, -1.9968], ..., [ 1.5099, 1.4159, 1.4073, ..., 1.6374, 1.7612, 1.7875], [ 1.5777, 1.4977, 1.5201, ..., 1.6375, 1.8659, 1.5201], [ 1.4972, 1.4320, 1.3597, ..., 1.7176, 1.8288, 1.7787]], [[-1.0572, -1.0847, -1.1214, ..., -1.6222, -1.6411, -1.6354], [-1.0968, -1.1228, -1.1195, ..., -1.7219, -1.7620, -1.7259], [-1.1368, -1.1645, -1.1458, ..., -1.7546, -1.7558, -1.7659], ..., [ 1.5274, 1.4239, 1.4096, ..., 1.6210, 1.7795, 1.7822], [ 1.5863, 1.4831, 1.4795, ..., 1.6470, 1.9226, 1.4517], [ 1.5009, 1.4279, 1.3310, ..., 1.7679, 1.9262, 1.8378]]], [[[-0.6838, -0.4050, 0.3320, ..., -1.1412, -1.6015, -1.6176], [-1.1534, -1.2065, -0.6341, ..., -0.8085, -1.7052, -1.6234], [-1.6612, -1.7494, -1.9238, ..., -0.6530, -1.6671, -1.6742], ..., [-1.2835, -1.4088, -1.4737, ..., -0.4704, -0.5777, -1.0418], [-1.5561, -1.5876, -1.5780, ..., -0.8626, -0.5952, -0.0768], [-1.4354, -1.7298, -1.5128, ..., -0.5234, -0.4457, -0.5956]], [[-0.8586, -0.4279, 0.4940, ..., -0.9733, -1.5037, -1.4493], [-1.3671, -1.2818, -0.5794, ..., -0.6702, -1.6734, -1.6188], [-1.8057, -1.8019, -1.8806, ..., -0.5556, -1.6788, -1.7183], ..., [-0.8052, -0.9692, -1.0882, ..., 0.2651, 0.0380, -0.5154], [-1.1737, -1.2018, -1.2318, ..., -0.1954, 0.0395, 0.5766], [-1.0230, -1.3570, -1.0809, ..., 0.0171, 0.0513, -0.1376]], [[-1.4684, -1.2196, -0.3905, ..., -1.5540, -1.5783, -1.7951], [-1.6731, -1.5891, -1.1761, ..., -1.3250, -1.5381, -1.5919], [-1.7791, -1.7560, -1.7765, ..., -1.1847, -1.3676, -1.4970], ..., [-1.7827, -1.7984, -1.8001, ..., -1.8002, -1.6973, -1.7352], [-1.7977, -1.7975, -1.7794, ..., -1.7830, -1.6259, -1.2002], [-1.8001, -1.8042, -1.8037, ..., -1.7906, -1.6941, -1.6283]]], [[[ 2.0020, 1.9936, 1.9936, ..., 1.4054, 1.3860, 1.5195], [ 2.0107, 1.9963, 1.9936, ..., 1.3728, 1.3497, 1.5062], [ 1.9936, 1.9936, 1.9936, ..., 1.3695, 1.3555, 1.4953], ..., [-1.3312, -1.1619, -1.2882, ..., 1.6821, 1.6550, 1.6570], [-1.2457, -1.2892, -1.1952, ..., 1.6918, 1.6793, 1.6969], [-1.2965, -1.3604, -1.1863, ..., 1.5922, 1.5119, 1.6449]], [[ 2.1762, 2.1676, 2.1675, ..., 1.7687, 1.7207, 1.8311], [ 2.1850, 2.1703, 2.1675, ..., 1.7266, 1.6796, 1.8111], [ 2.1676, 2.1676, 2.1675, ..., 1.7231, 1.6686, 1.7849], ..., [-1.2885, -1.1765, -1.2336, ..., 2.0728, 2.0363, 2.0554], [-1.2496, -1.2071, -1.1819, ..., 2.0849, 2.0747, 2.0926], [-1.2470, -1.2976, -1.1701, ..., 2.0160, 1.9222, 2.0571]], [[ 2.3539, 2.3453, 2.3453, ..., 2.0093, 1.9601, 2.0802], [ 2.3627, 2.3480, 2.3453, ..., 1.9831, 1.9414, 2.0748], [ 2.3453, 2.3453, 2.3453, ..., 1.9996, 1.9712, 2.0793], ..., [-1.1374, -1.0607, -1.1587, ..., 2.4255, 2.3983, 2.4046], [-1.1003, -1.1513, -1.0821, ..., 2.4392, 2.4272, 2.4449], [-1.0618, -1.1731, -0.9882, ..., 2.3906, 2.2974, 2.4127]]]], device=&#39;cuda:0&#39;) . . Note: Our stacked images. . Predictions of the baseline model. . preds,_ = learn.get_preds(dl=[(x,y)]) preds[0] . tensor([1.9299e-05, 4.9273e-06, 6.5637e-07, 1.3213e-06, 3.0726e-05, 3.5227e-06, 1.9753e-05, 4.7022e-06, 1.8091e-05, 2.5976e-05, 3.0315e-06, 2.2854e-04, 5.6780e-03, 9.8708e-01, 2.5719e-05, 2.6411e-03, 2.5113e-03, 2.7535e-04, 3.5884e-06, 1.9030e-06, 4.6491e-05, 3.8401e-07, 1.6292e-06, 3.3919e-06, 6.9697e-06, 1.3987e-06, 5.8959e-05, 3.0408e-06, 2.8120e-05, 2.3738e-06, 2.7004e-05, 5.0658e-05, 3.1840e-06, 4.2689e-05, 1.1184e-03, 1.7468e-05, 1.4993e-05]) . . Note: result for fist item that adds up to one. There are 37 outputs for 37 image categories and the results are in percentage for probability of each category. . _ . TensorCategory([13, 35, 8, 36, 3, 10, 10, 14, 22, 1, 5, 5, 5, 0, 4, 7, 11, 33, 18, 25, 20, 3, 33, 0, 25, 15, 27, 9, 17, 25, 19, 26, 9, 0, 35, 5, 6, 1, 31, 14, 7, 9, 8, 27, 2, 7, 21, 13, 26, 17, 25, 30, 31, 5, 19, 17, 4, 12, 29, 8, 21, 33, 18, 9]) . category codes . len(preds[0]),preds[0].sum() . (37, tensor(1.)) . 37 categories that adds up to one. . Function for classifiying more than one category. . plot_function(torch.sigmoid, min=-4,max=4) . This is how torch.sigmoid squish values between 0 and 1. . torch.random.manual_seed(42); . acts = torch.randn((6,2))*2 acts . tensor([[ 0.6734, 0.2576], [ 0.4689, 0.4607], [-2.2457, -0.3727], [ 4.4164, -1.2760], [ 0.9233, 0.5347], [ 1.0698, 1.6187]]) . . Note: These are random numbers that represent binary results of a network. First colums represent 3&#8217;s the and second is 7&#8217;s standart deviation of 2. It generally shows how confident the model about the predictions. . acts.sigmoid() . tensor([[0.6623, 0.5641], [0.6151, 0.6132], [0.0957, 0.4079], [0.9881, 0.2182], [0.7157, 0.6306], [0.7446, 0.8346]]) . . Note: If we apply the sigmoid the result become like this(above). Obviously they are not adds up to one. These are relative confidence over inputs. . (acts[:,0]-acts[:,1]).sigmoid() . tensor([0.6025, 0.5021, 0.1332, 0.9966, 0.5959, 0.3661]) . . Note: If we take the difference between these relative confidence the results become this above: . this part is a bit different in the lesson video. so check the video. 1:35:20 . sm_acts = torch.softmax(acts, dim=1) sm_acts . tensor([[0.6025, 0.3975], [0.5021, 0.4979], [0.1332, 0.8668], [0.9966, 0.0034], [0.5959, 0.4041], [0.3661, 0.6339]]) . . Note: torch.softmax does that in one step. Now results for each item adds up to one, . Log Likelihood . targ = tensor([0,1,0,1,1,0]) . sm_acts . tensor([[0.6025, 0.3975], [0.5021, 0.4979], [0.1332, 0.8668], [0.9966, 0.0034], [0.5959, 0.4041], [0.3661, 0.6339]]) . this is our softmax activations . idx = range(6) sm_acts[idx, targ] . tensor([0.6025, 0.4979, 0.1332, 0.0034, 0.4041, 0.3661]) . These are again confidence level our model on each item . from IPython.display import HTML df = pd.DataFrame(sm_acts, columns=[&quot;3&quot;,&quot;7&quot;]) df[&#39;targ&#39;] = targ df[&#39;idx&#39;] = idx df[&#39;loss&#39;] = sm_acts[range(6), targ] t = df.style.hide_index() #To have html code compatible with our script html = t._repr_html_().split(&#39;&lt;/style&gt;&#39;)[1] html = re.sub(r&#39;&lt;table id=&quot;([^&quot;]+)&quot; s*&gt;&#39;, r&#39;&lt;table &gt;&#39;, html) display(HTML(html)) . 3 7 targ idx loss . 0.602469 | 0.397531 | 0 | 0 | 0.602469 | . 0.502065 | 0.497935 | 1 | 1 | 0.497935 | . 0.133188 | 0.866811 | 0 | 2 | 0.133188 | . 0.996640 | 0.003360 | 1 | 3 | 0.003360 | . 0.595949 | 0.404051 | 1 | 4 | 0.404051 | . 0.366118 | 0.633882 | 0 | 5 | 0.366118 | . . Note: results as a table. . . Warning: I think label is wrong here. It must be the confidence instead. . -sm_acts[idx, targ] . tensor([-0.6025, -0.4979, -0.1332, -0.0034, -0.4041, -0.3661]) . . Warning: This is a caveat here. These are neg of our confidence level, not loss. . F.nll_loss(sm_acts, targ, reduction=&#39;none&#39;) . tensor([-0.6025, -0.4979, -0.1332, -0.0034, -0.4041, -0.3661]) . . Warning: Pytorch way of doing the same here above. In one step. But number are still not right, that will be addresses in the Taking the Log section below. The reason is F.nll_loss (negative log likelihood loss) needs arguments such that log is already applied to make the calculation right.(loss) . Taking the Log . . Warning: Confusing Name, Beware: The nll in nll_loss stands for &quot;negative log likelihood,&quot; but it doesn&#8217;t actually take the log at all! It assumes you have already taken the log. PyTorch has a function called log_softmax that combines log and softmax in a fast and accurate way. nll_loss is designed to be used after log_softmax. . When we first take the softmax, and then the log likelihood of that, that combination is called cross-entropy loss. In PyTorch, this is available as nn.CrossEntropyLoss (which, in practice, actually does log_softmax and then nll_loss): . loss_func = nn.CrossEntropyLoss() . our fuction . loss_func(acts, targ) . tensor(1.8045) . pytorch&#39;s crossEntropy . F.cross_entropy(acts, targ) . tensor(1.8045) . . this is the mean of all loss . nn.CrossEntropyLoss()(acts, targ) . tensor(1.8045) . and this is all result without taking the mean . nn.CrossEntropyLoss(reduction=&#39;none&#39;)(acts, targ) . tensor([0.5067, 0.6973, 2.0160, 5.6958, 0.9062, 1.0048]) . . Note: Results above are cross entrophy loss for each image in the list (of course our current numbers are fake numbers) . Manual calculation log_softmax + nll_loss . log_sm_acts = torch.log_softmax(acts, dim=1) log_sm_acts . tensor([[-5.0672e-01, -9.2248e-01], [-6.8903e-01, -6.9729e-01], [-2.0160e+00, -1.4293e-01], [-3.3658e-03, -5.6958e+00], [-5.1760e-01, -9.0621e-01], [-1.0048e+00, -4.5589e-01]]) . F.nll_loss(log_sm_acts, targ, reduction=&#39;none&#39;) . tensor([0.5067, 0.6973, 2.0160, 5.6958, 0.9062, 1.0048]) . Revisiting the Baseline Model (Model Interpretation) . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix(figsize=(12,12), dpi=60) . interp.most_confused(min_val=5) . [(&#39;american_pit_bull_terrier&#39;, &#39;staffordshire_bull_terrier&#39;, 8), (&#39;Ragdoll&#39;, &#39;Birman&#39;, 7), (&#39;Egyptian_Mau&#39;, &#39;Bengal&#39;, 5)] . this is our baseline we can start improveing from this point. . Improving Our Model . Fine Tune . Fine tune the model with almost random arguments . learn = cnn_learner(dls, resnet34, metrics=error_rate) learn.fine_tune(1, base_lr=0.1) . epoch train_loss valid_loss error_rate time . 0 | 2.588707 | 4.300000 | 0.445873 | 00:21 | . epoch train_loss valid_loss error_rate time . 0 | 3.385068 | 2.263443 | 0.510825 | 00:26 | . . Note: this is where we overshoot. Our loss just increase over second epoch is there a better way to find a learning rate? . The Learning Rate Finder . learn = cnn_learner(dls, resnet34, metrics=error_rate) . suggested_lr= learn.lr_find() . /home/niyazi/anaconda3/envs/fastbook/lib/python3.8/site-packages/fastai/callback/schedule.py:270: UserWarning: color is redundantly defined by the &#39;color&#39; keyword argument and the fmt string &#34;ro&#34; (-&gt; color=&#39;r&#39;). The keyword argument will take precedence. ax.plot(val, idx, &#39;ro&#39;, label=nm, c=color) . . Warning: There is a discrepancy between lesson and reading group notebooks. In the book we get two values from the function but in reading group, only one. I thing there was an update for this function that not reflected in the book. . suggested_lr . SuggestedLRs(valley=tensor(0.0008)) . print(f&quot;suggested: {suggested_lr.valley:.2e}&quot;) . suggested: 8.32e-04 . learn = cnn_learner(dls, resnet34, metrics=error_rate) learn.fine_tune(2, base_lr=8.32e-04) . epoch train_loss valid_loss error_rate time . 0 | 2.203637 | 0.456601 | 0.139378 | 00:21 | . epoch train_loss valid_loss error_rate time . 0 | 0.631289 | 0.287444 | 0.087280 | 00:26 | . 1 | 0.423191 | 0.263927 | 0.085250 | 00:26 | . At this time it decreases steadily . What&#39;s under the hood of fine_tune . When we create a model from a pretrained network fastai automatically freezes all of the pretrained layers for us. When we call the fine_tune method fastai does two things: . Trains the randomly added layers for one epoch, with all other layers frozen | Unfreezes all of the layers, and trains them all for the number of epochs requested | . Lets do it manually . learn = cnn_learner(dls, resnet34, metrics=error_rate) learn.fit_one_cycle(3, 8.32e-04) . epoch train_loss valid_loss error_rate time . 0 | 1.806578 | 0.363257 | 0.114344 | 00:21 | . 1 | 0.697060 | 0.258624 | 0.083221 | 00:22 | . 2 | 0.449906 | 0.254586 | 0.087957 | 00:21 | . learn.unfreeze() . and run lr_find again, because having more layers to train, and weights that have already been trained for three epochs, means our previously found learning rate isn&#39;t appropriate any more: . find new learning rate , because now we include previous layers too. . learn.lr_find() . SuggestedLRs(valley=tensor(0.0001)) . Train again with the new lr. . learn.fit_one_cycle(6, lr_max=0.0001) . epoch train_loss valid_loss error_rate time . 0 | 0.369805 | 0.265072 | 0.085250 | 00:26 | . 1 | 0.379721 | 0.352767 | 0.112314 | 00:26 | . 2 | 0.320787 | 0.257370 | 0.075778 | 00:26 | . 3 | 0.198347 | 0.217450 | 0.066306 | 00:27 | . 4 | 0.143628 | 0.217090 | 0.066306 | 00:26 | . 5 | 0.111457 | 0.216973 | 0.066306 | 00:27 | . So far so good but there is more way to go . Discriminative Learning Rates . Basically we use variable learning rate for the model. Bigger rate for the later layers and smaller for early layers. . learn = cnn_learner(dls, resnet34, metrics=error_rate) learn.fit_one_cycle(3, 8.32e-04)# first lr learn.unfreeze() learn.fit_one_cycle(12, lr_max=slice(0.00005,0.0005))#second lr with a range . epoch train_loss valid_loss error_rate time . 0 | 1.783345 | 0.370482 | 0.119080 | 00:22 | . 1 | 0.700986 | 0.293102 | 0.096076 | 00:22 | . 2 | 0.448751 | 0.262937 | 0.093369 | 00:22 | . epoch train_loss valid_loss error_rate time . 0 | 0.390943 | 0.245929 | 0.079838 | 00:28 | . 1 | 0.356807 | 0.281976 | 0.088633 | 00:27 | . 2 | 0.344888 | 0.417350 | 0.117727 | 00:27 | . 3 | 0.267143 | 0.284152 | 0.081867 | 00:27 | . 4 | 0.217775 | 0.330306 | 0.092693 | 00:28 | . 5 | 0.172308 | 0.310047 | 0.081191 | 00:27 | . 6 | 0.122903 | 0.299161 | 0.079161 | 00:27 | . 7 | 0.099924 | 0.262270 | 0.074425 | 00:27 | . 8 | 0.059424 | 0.278250 | 0.074425 | 00:27 | . 9 | 0.045987 | 0.253283 | 0.067659 | 00:27 | . 10 | 0.036630 | 0.251685 | 0.068336 | 00:27 | . 11 | 0.034524 | 0.254469 | 0.067659 | 00:27 | . It is better most of the times.(sometimes I do not get good results, need to arrange the slice values carefully) . learn.recorder.plot_loss() . . Note: Directly from the book: . As you can see, the training loss keeps getting better and better. But notice that eventually the validation loss improvement slows, and sometimes even gets worse! This is the point at which the model is starting to over fit. In particular, the model is becoming overconfident of its predictions. But this does not mean that it is getting less accurate, necessarily. Take a look at the table of training results per epoch, and you will often see that the accuracy continues improving, even as the validation loss gets worse. In the end what matters is your accuracy, or more generally your chosen metrics, not the loss. The loss is just the function we&#39;ve given the computer to help us to optimize. . . Important: I need to think about it how loss increase and accuracy stil becoming better. . Deeper Architectures . In general, a bigger model has the ability to better capture the real underlying relationships in your data, and also to capture and memorize the specific details of your individual images. However, using a deeper model is going to require more GPU RAM, so you may need to lower the size of your batches to avoid an out-of-memory error. This happens when you try to fit too much inside your GPU and looks like: . Cuda runtime error: out of memory . You may have to restart your notebook when this happens. The way to solve it is to use a smaller batch size, which means passing smaller groups of images at any given time through your model. You can pass the batch size you want to the call creating your DataLoaders with bs=. . The other downside of deeper architectures is that they take quite a bit longer to train. One technique that can speed things up a lot is mixed-precision training. This refers to using less-precise numbers (half-precision floating point, also called fp16) where possible during training. As we are writing these words in early 2020, nearly all current NVIDIA GPUs support a special feature called tensor cores that can dramatically speed up neural network training, by 2-3x. They also require a lot less GPU memory. To enable this feature in fastai, just add to_fp16() after your Learner creation (you also need to import the module). . You can&#39;t really know ahead of time what the best architecture for your particular problem is—you need to try training some. So let&#39;s try a ResNet-50 now with mixed precision: . from fastai.callback.fp16 import * learn = cnn_learner(dls, resnet50, metrics=error_rate).to_fp16() learn.fine_tune(12, freeze_epochs=3) . epoch train_loss valid_loss error_rate time . 0 | 1.209030 | 0.308840 | 0.097429 | 00:20 | . 1 | 0.562807 | 0.326714 | 0.100812 | 00:21 | . 2 | 0.396488 | 0.263611 | 0.089310 | 00:21 | . epoch train_loss valid_loss error_rate time . 0 | 0.255827 | 0.262954 | 0.080514 | 00:24 | . 1 | 0.215601 | 0.256829 | 0.072395 | 00:24 | . 2 | 0.238660 | 0.392900 | 0.099459 | 00:23 | . 3 | 0.246021 | 0.409503 | 0.107578 | 00:24 | . 4 | 0.196632 | 0.448040 | 0.106225 | 00:23 | . 5 | 0.137433 | 0.353745 | 0.091340 | 00:23 | . 6 | 0.108764 | 0.333932 | 0.085250 | 00:24 | . 7 | 0.078872 | 0.295772 | 0.081867 | 00:24 | . 8 | 0.055900 | 0.273311 | 0.073072 | 00:24 | . 9 | 0.040353 | 0.274645 | 0.070365 | 00:24 | . 10 | 0.020883 | 0.260611 | 0.070365 | 00:24 | . 11 | 0.021018 | 0.259633 | 0.066982 | 00:24 | . learn.recorder.plot_loss() . As above traing time is not changed much. .",
            "url": "https://niyazikemer.com/fastbook/2021/07/22/chapter-5.html",
            "relUrl": "/fastbook/2021/07/22/chapter-5.html",
            "date": " • Jul 22, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Chapter 4",
            "content": ". I found this little one in front of my window. Suffering from foot deformity and can&#39;t fly. Now fully recovered and back his/her family. . import fastbook fastbook.setup_book() # below is for disabling Jedi autocomplete that doesn&#39;t work well. %config Completer.use_jedi = False . from fastai.vision.all import * from fastbook import * matplotlib.rc(&#39;image&#39;, cmap=&#39;Greys&#39;) . EXPLORING THE DATASET . What untar does? . . Note: &#8217;untar_data&#8217; come from fastai library, it downloads the data and untar it if it didn&#8217;t already and returns the destination folder. . path = untar_data(URLs.MNIST_SAMPLE) . ??untar_data . . Tip: Check it with &#8217;??&#8217; . What is path ? . path . Path(&#39;.&#39;) . . Tip: what is inside the current folder? this where the jupyter notebook works. &#8217;!&#8217; at the beginning means the command works on the terminal. . What is !ls ? . . Note: ls works on the terminal. (-d for only listing directories) . !ls . 2020-02-20-test.ipynb ghtop_images my_icons 2021-07-16-chapter-4.ipynb images README.md . can be used like this too. . !ls /home/niyazi/.fastai/data/mnist_sample/train -d . /home/niyazi/.fastai/data/mnist_sample/train . also like this: . !ls /home/niyazi/.fastai/data/mnist_sample/train/3 -d . /home/niyazi/.fastai/data/mnist_sample/train/3 . What is tree ? . . Note: for seeing tree sturucture of the files and folders (-d argument for directories) . !tree /home/niyazi/.fastai/data/mnist_sample/ -d . /home/niyazi/.fastai/data/mnist_sample/ ├── train │   ├── 3 │   └── 7 └── valid ├── 3 └── 7 6 directories . Path.BASE_PATH = path . What is ls() ? . . Note: &#8217;ls&#8217; is method by fastai similiar the Python&#8217;s list fuction but more powerful. . path.ls() . (#3) [Path(&#39;labels.csv&#39;),Path(&#39;train&#39;),Path(&#39;valid&#39;)] . . Note: Check this usage: . (path/&#39;train&#39;) . Path(&#39;train&#39;) . (path/&#39;train&#39;).ls() . (#2) [Path(&#39;train/7&#39;),Path(&#39;train/3&#39;)] . . Note: there are two folders under training folder . threes = (path/&#39;train&#39;/&#39;3&#39;).ls().sorted() sevens = (path/&#39;train&#39;/&#39;7&#39;).ls().sorted() . . Note: this code returns and ordered list of paths . What is PIL ? (Python Image Library) . im3_path = threes[1] im3 = Image.open(im3_path) type(im3) #im3 . PIL.PngImagePlugin.PngImageFile . NumPy array . The 4:10 indicates we requested the rows from index 4 (included) to 10 (not included) and the same for the columns. NumPy indexes from top to bottom and left to right, so this section is located in the top-left corner of the image. . array(im3)[4:10,4:10] . array([[ 0, 0, 0, 0, 0, 0], [ 0, 0, 0, 0, 0, 29], [ 0, 0, 0, 48, 166, 224], [ 0, 93, 244, 249, 253, 187], [ 0, 107, 253, 253, 230, 48], [ 0, 3, 20, 20, 15, 0]], dtype=uint8) . . Note: this is how it looks some part of the image in the NumPy array . Pytorch tensor . Here&#39;s the same thing as a PyTorch tensor: . tensor(im3)[4:10,4:10] . tensor([[ 0, 0, 0, 0, 0, 0], [ 0, 0, 0, 0, 0, 29], [ 0, 0, 0, 48, 166, 224], [ 0, 93, 244, 249, 253, 187], [ 0, 107, 253, 253, 230, 48], [ 0, 3, 20, 20, 15, 0]], dtype=torch.uint8) . . Note: It is possible to convert it to a tansor as well. . im3_t = tensor(im3) df = pd.DataFrame(im3_t[4:15,4:22]) df.style.set_properties(**{&#39;font-size&#39;:&#39;6pt&#39;}).background_gradient(&#39;OrRd&#39;) . 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 . 0 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1 0 | 0 | 0 | 0 | 0 | 29 | 150 | 195 | 254 | 255 | 254 | 176 | 193 | 150 | 96 | 0 | 0 | 0 | . 2 0 | 0 | 0 | 48 | 166 | 224 | 253 | 253 | 234 | 196 | 253 | 253 | 253 | 253 | 233 | 0 | 0 | 0 | . 3 0 | 93 | 244 | 249 | 253 | 187 | 46 | 10 | 8 | 4 | 10 | 194 | 253 | 253 | 233 | 0 | 0 | 0 | . 4 0 | 107 | 253 | 253 | 230 | 48 | 0 | 0 | 0 | 0 | 0 | 192 | 253 | 253 | 156 | 0 | 0 | 0 | . 5 0 | 3 | 20 | 20 | 15 | 0 | 0 | 0 | 0 | 0 | 43 | 224 | 253 | 245 | 74 | 0 | 0 | 0 | . 6 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 249 | 253 | 245 | 126 | 0 | 0 | 0 | 0 | . 7 0 | 0 | 0 | 0 | 0 | 0 | 0 | 14 | 101 | 223 | 253 | 248 | 124 | 0 | 0 | 0 | 0 | 0 | . 8 0 | 0 | 0 | 0 | 0 | 11 | 166 | 239 | 253 | 253 | 253 | 187 | 30 | 0 | 0 | 0 | 0 | 0 | . 9 0 | 0 | 0 | 0 | 0 | 16 | 248 | 250 | 253 | 253 | 253 | 253 | 232 | 213 | 111 | 2 | 0 | 0 | . 10 0 | 0 | 0 | 0 | 0 | 0 | 0 | 43 | 98 | 98 | 208 | 253 | 253 | 253 | 253 | 187 | 22 | 0 | . BASELINE: Pixel similarity . seven_tensors = [tensor(Image.open(o)) for o in sevens] three_tensors = [tensor(Image.open(o)) for o in threes] len(three_tensors),len(seven_tensors) . (6131, 6265) . . Note: &#8217;sevens&#8217; are still list of paths. &#8217;o&#8217; is a path in the list, then with the list comprehension we use the path to read the image, then cast the image into tensor.(Same for threes). &#8217;seven_tensor&#8217; is a list of tensors . show_image(three_tensors[0]); . . Tip: Show image shows the first tensor as image . show_image(tensor(im3)) . &lt;AxesSubplot:&gt; . . Note: check this in more straight way (im3&gt;tensor&gt;image) . Training Set: Stacking Tensors . stacked_sevens = torch.stack(seven_tensors).float()/255 stacked_threes = torch.stack(three_tensors).float()/255 stacked_threes.shape . torch.Size([6131, 28, 28]) . type(stacked_sevens) . torch.Tensor . type(stacked_sevens[0]) . torch.Tensor . type(seven_tensors) . list . . Note: now we turn our list into a tensor size of ([6131, 28, 28]) . len(stacked_threes.shape) . 3 . . Note: This is rank (lenght of the shape) . stacked_threes.ndim . 3 . . Note: This is more direct way to get it. (ndim) . Mean of threes and sevens our ideal 3 and 7. . mean3 = stacked_threes.mean(0) show_image(mean3); . . Note: This is the mean of the all tensors through first axis. &#8217;Ideal Three&#8217; . mean7 = stacked_sevens.mean(0) show_image(mean7); . a_3 = stacked_threes[1] show_image(a_3); . Distance between the ideal three and other threes . dist_3_abs = (a_3 - mean3).abs().mean() dist_3_sqr = ((a_3 - mean3)**2).mean().sqrt() dist_3_abs,dist_3_sqr . (tensor(0.1114), tensor(0.2021)) . dist_7_abs = (a_3 - mean7).abs().mean() dist_7_sqr = ((a_3 - mean7)**2).mean().sqrt() dist_7_abs,dist_7_sqr . (tensor(0.1586), tensor(0.3021)) . . Note: Then we need to calculate the distance between the &#8217;ideal&#8217; and ordinary three.Two methods for getting the distance L1 Norm and MSE second one is panelize bigger mistake more havil, L1 is uniform. It is obvious that a_3 is closer to the perfect 3 so our approach worked at this time. (Both in L1 and MSE) . Pytorch L1 and MSE fuctions . F.l1_loss(a_3.float(),mean7), F.mse_loss(a_3,mean7).sqrt() . (tensor(0.1586), tensor(0.3021)) . . Note: torch.nn.functional as F (for mse, manually take the sqrt) . . Important: (from notebook) If you don&#8217;t know what C is, don&#8217;t worry as you won&#8217;t need it at all. In a nutshell, it&#8217;s a low-level (low-level means more similar to the language that computers use internally) language that is very fast compared to Python. To take advantage of its speed while programming in Python, try to avoid as much as possible writing loops, and replace them by commands that work directly on arrays or tensors. . Array and Tensor Examples . data = [[1,2,3],[4,5,6]] arr = array (data) tns = tensor(data) . arr # numpy . array([[1, 2, 3], [4, 5, 6]]) . tns # pytorch . tensor([[1, 2, 3], [4, 5, 6]]) . Splitting, adding, multiplying tensors . tns[:,1] . tensor([2, 5]) . tns[1,1:3] . tensor([5, 6]) . tns+1 . tensor([[2, 3, 4], [5, 6, 7]]) . tns.type() . &#39;torch.LongTensor&#39; . tns*1.5 . tensor([[1.5000, 3.0000, 4.5000], [6.0000, 7.5000, 9.0000]]) . Validation set :Stacking Tensors . valid_3_tens = torch.stack([tensor(Image.open(o)) for o in (path/&#39;valid&#39;/&#39;3&#39;).ls()]) valid_3_tens = valid_3_tens.float()/255 valid_7_tens = torch.stack([tensor(Image.open(o)) for o in (path/&#39;valid&#39;/&#39;7&#39;).ls()]) valid_7_tens = valid_7_tens.float()/255 valid_3_tens.shape,valid_7_tens.shape . (torch.Size([1010, 28, 28]), torch.Size([1028, 28, 28])) . Manual L1 distance function . def mnist_distance(a,b): return (a-b).abs().mean((-1,-2)) mnist_distance(a_3, mean3) . tensor(0.1114) . This is broadcasting: . valid_3_dist = mnist_distance(valid_3_tens, mean3) valid_3_dist, valid_3_dist.shape . (tensor([0.1270, 0.1254, 0.1114, ..., 0.1494, 0.1097, 0.1365]), torch.Size([1010])) . . Note: I think this an example of not using loops which slows down the process (check above important tag). Although shapes of the tensors don&#8217;t match, out function still works. Pytorch fills the gaps. . here is another example. Shapes don&#39;t match. . tensor([1,2,3]) + tensor(1) . tensor([2, 3, 4]) . (valid_3_tens-mean3).shape . torch.Size([1010, 28, 28]) . def is_3(x): return mnist_distance(x,mean3) &lt; mnist_distance(x,mean7) . is_3(a_3), is_3(a_3).float() . (tensor(True), tensor(1.)) . here is an another broadcasting for all validation set: . is_3(valid_3_tens) . tensor([True, True, True, ..., True, True, True]) . Accuracy of our &#39;ideal&#39; 3 and 7 . accuracy_3s = is_3(valid_3_tens).float() .mean() accuracy_7s = (1 - is_3(valid_7_tens).float()).mean() accuracy_3s,accuracy_7s,(accuracy_3s+accuracy_7s)/2 . (tensor(0.9168), tensor(0.9854), tensor(0.9511)) . STOCHASTIC GRADIENT DECENT (SGD) . Arthur Samues Machine Learning process: . Initialize the weights. | For each image, use these weights to predict whether it appears to be a 3 or a 7. | Based on these predictions, calculate how good the model is (its loss). | Calculate the gradient, which measures for each weight, how changing that weight would change the loss (SGD) | Step (that is, change) all the weights based on that calculation. | Go back to the step 2, and repeat the process. | Iterate until you decide to stop the training process (for instance, because the model is good enough or you don&#39;t want to wait any longer). | . #caption The gradient descent process #alt Graph showing the steps for Gradient Descent gv(&#39;&#39;&#39; init-&gt;predict-&gt;loss-&gt;gradient-&gt;step-&gt;stop step-&gt;predict[label=repeat] &#39;&#39;&#39;) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; G init init predict predict init&#45;&gt;predict loss loss predict&#45;&gt;loss gradient gradient loss&#45;&gt;gradient step step gradient&#45;&gt;step step&#45;&gt;predict repeat stop stop step&#45;&gt;stop GD example . def f(x): return x**2 . plot_function(f, &#39;x&#39;, &#39;x**2&#39;) plt.scatter(-1.5, f(-1.5), color=&#39;red&#39;); . We need to decrease the loss . . How to calculate gradient: . Now our tensor xt is under investigation. Pytorch will keeps its eye on it. . xt = tensor(3.).requires_grad_() . yt = f(xt) yt . tensor(9., grad_fn=&lt;PowBackward0&gt;) . Result is 9 but there is a grad function in the result. . . yt.backward() . backward calculates the derivative. . xt.grad . tensor(6.) . result is 6. . . now with a bigger tensor . xt = tensor([3.,4.,10.]).requires_grad_() xt . tensor([ 3., 4., 10.], requires_grad=True) . def f(x): return (x**2).sum() . yt = f(xt) yt . tensor(125., grad_fn=&lt;SumBackward0&gt;) . again we expect 2*xt: . yt.backward() . xt.grad . tensor([ 6., 8., 20.]) . End to end SGD example . time = torch.arange(0,20).float() time . tensor([ 0., 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19.]) . speed = torch.randn(20)*3 + 0.75*(time-9.5)**2 + 1 plt.scatter(time,speed) . &lt;matplotlib.collections.PathCollection at 0x7f8f2edd27c0&gt; . Now we are trying to come up with some parameters for our quadratic fuction that predicts speed any given time. Our choice is quadratic but that could be something else too. with a quadratic function our problem would be much easier. . here is the function gets time and parameter as inputs and predicts a result: . def f(t, params): a,b,c = params return a*(t**2) + (b*t) + c . this our loss function that calculate distance between prediction and target( actual mesurements) . def mse(preds, targets): return ((preds-targets)**2).mean().sqrt() . Step 1: here are initial random parameters: . params = torch.randn(3).requires_grad_() params . tensor([ 0.9569, 0.0048, -0.1506], requires_grad=True) . orig_params = params.clone() . Step 2: calculate predictions: . preds = f(time,params) . def show_preds(preds, ax=None): if ax is None: ax=plt.subplots()[1] ax.scatter(time, speed) ax.scatter(time, to_np(preds), color=&#39;red&#39;) ax.set_ylim(-300,100) . show_preds(preds) . Step 3: Calculate the loss . loss = mse(preds,speed) loss . tensor(139.3082, grad_fn=&lt;SqrtBackward&gt;) . . The Question is how to improve these results: . Step 4: first we calculate the gradient: . Pytorch makes it easier we just call the backward() on the loss but it calculates gradient for the params &#39;a&#39; &#39;b&#39; and &#39;c&#39;._ . loss.backward() params.grad # this is the derivative of the initial values in other word our slope. . tensor([165.0324, 10.5991, 0.6615]) . params.grad * 1e-5 # scaler at the end is learning rate. . tensor([1.6503e-03, 1.0599e-04, 6.6150e-06]) . params # they are still same. . tensor([ 0.9569, 0.0048, -0.1506], requires_grad=True) . . Step 5: Step the weight. . we picked the learning rate 1e-5 very small step to avoid missing the lowest possible loss. . lr = 1e-5 params.data -= lr * params.grad.data params.grad = None . preds = f(time,params) mse(preds, speed) . tensor(139.0348, grad_fn=&lt;SqrtBackward&gt;) . lets create a function for all these steps . def apply_step(params, prn=True): preds = f(time, params) loss = mse(preds, speed) loss.backward() params.data -= lr * params.grad.data params.grad = None if prn: print(loss.item()) return preds . Step 6: repeat the step: . for i in range(10): apply_step(params) . 139.03475952148438 138.76133728027344 138.4879150390625 138.2145538330078 137.94122314453125 137.6679229736328 137.39466857910156 137.12144470214844 136.84825134277344 136.5751190185547 . params = orig_params.detach().requires_grad_() . _,axs = plt.subplots(1,4,figsize=(12,3)) for ax in axs: show_preds(apply_step(params, False), ax) plt.tight_layout() . . MNIST . Loss Function our 3 and 7 recognizer. Currently we use metric not loss . train_x = torch.cat([stacked_threes, stacked_sevens]).view(-1, 28*28) . train_x.size() . torch.Size([12396, 784]) . train_y = tensor([1]*len(threes) + [0]*len(sevens)).unsqueeze(1) train_x.shape,train_y.shape . (torch.Size([12396, 784]), torch.Size([12396, 1])) . How tensor manipulated . temp_tensor = tensor (1) . temp_tensor . tensor(1) . type(temp_tensor) . torch.Tensor . is above tensor is wrong what&#39;s the difference? . . we have a tensor . temp_tensor = tensor([1]) . then we multiuplied the inside of . temp_tensor =tensor([1]*4) . temp_tensor . tensor([1, 1, 1, 1]) . temp_tensor.shape . torch.Size([4]) . temp_tensor.ndim . 1 . temp_tensor.size() . torch.Size([4]) . (temp_tensor).unsqueeze(1) . tensor([[1], [1], [1], [1]]) . . Warning: looked changed but why size is still unchanged why not [4,1] . temp_tensor.shape . torch.Size([4]) . temp_tensor.size() . torch.Size([4]) . How unsqueeze works? . . Warning: Whaaaaaaaaaaaaat? . (temp_tensor).unsqueeze(1) doesn&#39;t work but (temp_tensor*1).unsqueeze(1) you need to unsqueeze it when creating otherwise it doesnt work. I do not believe it. . temp_tensor = tensor([1]).unsqueeze(1) . temp_tensor.shape . torch.Size([1, 1]) . temp_tensor =tensor([1]*1).unsqueeze(1) . Dataset . dset = list(zip(train_x,train_y)) x,y = dset[0] x.shape,x.ndim,y . (torch.Size([784]), 1, tensor([1])) . we create list of tuples, each tuple contains a image and a target . valid_x = torch.cat([valid_3_tens, valid_7_tens]).view(-1, 28*28) valid_y = tensor([1]*len(valid_3_tens) + [0]*len(valid_7_tens)).unsqueeze(1) valid_dset = list(zip(valid_x,valid_y)) . same for validation . . Weights . this is not clear on the videos but consider a layer NN of 728 inputs and 1 output. . def init_params(size, std=1.0): return (torch.randn(size)*std).requires_grad_() . weights = init_params((28*28,1)) . weights.shape . torch.Size([784, 1]) . bias = init_params(1) . . Note: The function weights*pixels won&#8217;t be flexible enough—it is always equal to 0 when the pixels are equal to 0 (i.e., its intercept is 0). You might remember from high school math that the formula for a line is y=w*x+b; we still need the b. We&#8217;ll initialize it to a random number too: . bias . tensor([0.0959], requires_grad=True) . Again transposing the weight matrix is not clear but Tariq Rashed&#39;s book would be very beneficial at this point . (train_x[0]*weights.T).sum() + bias . tensor([-5.6867], grad_fn=&lt;AddBackward0&gt;) . for all dataset put this multiplication in a function . def linear1(xb): return xb@weights + bias preds = linear1(train_x) preds . tensor([[ -5.6867], [ -6.5451], [ -2.0241], ..., [-14.3286], [ 4.3505], [-12.6773]], grad_fn=&lt;AddBackward0&gt;) . Create a tensor with results based on their value (above 0.5 is 7 and below it is 3) . corrects = (preds&gt;0.5).float() == train_y corrects . tensor([[False], [False], [False], ..., [ True], [False], [ True]]) . . check it . corrects.float().mean().item() . 0.4636172950267792 . almost half of them is 3 and the other half is 7 (since weighs are totally random) . . Why we need a loss Function . Basically we need to have gradients for correcting our weighs, we need to know which direction we need to go . If you dont understand all of these, ckeck khan academy for gradient. . trgts = tensor([1,0,1]) prds = tensor([0.9, 0.4, 0.2]) . def mnist_loss(predictions, targets): return torch.where(targets==1, 1-predictions, predictions).mean() . torch.where(trgts==1, 1-prds, prds) . tensor([0.1000, 0.4000, 0.8000]) . mnist_loss(prds,trgts) . tensor(0.4333) . Sigmoid . We need this for squishing predictions between 0-1 . def sigmoid(x): return 1/(1+torch.exp(-x)) . plot_function(torch.sigmoid, title=&#39;Sigmoid&#39;, min=-4, max=4) . update the fuction with the sigmoid thats all. . def mnist_loss(predictions, targets): predictions = predictions.sigmoid() return torch.where(targets==1, 1-predictions, predictions).mean() . What are SGD and Mini-Batches . This explains most of it. . coll = range(15) dl = DataLoader(coll, batch_size=5, shuffle=True) list(dl) . [tensor([ 0, 2, 10, 13, 8]), tensor([11, 12, 4, 1, 5]), tensor([ 3, 14, 6, 9, 7])] . but this is only a list however we neeed a tuple consist of independent and dependent variable. . ds = L(enumerate(string.ascii_lowercase)) ds . (#26) [(0, &#39;a&#39;),(1, &#39;b&#39;),(2, &#39;c&#39;),(3, &#39;d&#39;),(4, &#39;e&#39;),(5, &#39;f&#39;),(6, &#39;g&#39;),(7, &#39;h&#39;),(8, &#39;i&#39;),(9, &#39;j&#39;)...] . DataLoader . then put it into a Dataloader. . dl = DataLoader(ds, batch_size=6, shuffle=True) list(dl) . [(tensor([ 1, 23, 9, 8, 24, 2]), (&#39;b&#39;, &#39;x&#39;, &#39;j&#39;, &#39;i&#39;, &#39;y&#39;, &#39;c&#39;)), (tensor([14, 25, 13, 11, 19, 5]), (&#39;o&#39;, &#39;z&#39;, &#39;n&#39;, &#39;l&#39;, &#39;t&#39;, &#39;f&#39;)), (tensor([ 0, 10, 4, 7, 18, 12]), (&#39;a&#39;, &#39;k&#39;, &#39;e&#39;, &#39;h&#39;, &#39;s&#39;, &#39;m&#39;)), (tensor([ 6, 21, 15, 16, 22, 3]), (&#39;g&#39;, &#39;v&#39;, &#39;p&#39;, &#39;q&#39;, &#39;w&#39;, &#39;d&#39;)), (tensor([20, 17]), (&#39;u&#39;, &#39;r&#39;))] . now we have batches and tuples . . all together . It&#39;s time to implement the process we saw in &lt;&gt;. In code, our process will be implemented something like this for each epoch:&lt;/p&gt; for x,y in dl: pred = model(x) loss = loss_func(pred, y) loss.backward() parameters -= parameters.grad * lr . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; weights = init_params((28*28,1)) bias = init_params(1) . dl = DataLoader(dset, batch_size=256) xb,yb = first(dl) xb.shape,yb.shape . (torch.Size([256, 784]), torch.Size([256, 1])) . valid_dl = DataLoader(valid_dset, batch_size=256) . a small test . batch = train_x[:4] batch.shape . torch.Size([4, 784]) . . predictions . preds = linear1(batch) preds . tensor([[ 8.0575], [14.3841], [-3.8017], [ 5.1179]], grad_fn=&lt;AddBackward0&gt;) . loss . loss = mnist_loss(preds, train_y[:4]) loss . tensor(0.2461, grad_fn=&lt;MeanBackward0&gt;) . gradients . loss.backward() weights.grad.shape,weights.grad.mean(),bias.grad . (torch.Size([784, 1]), tensor(-0.0010), tensor([-0.0069])) . for the step we need a optimizer . . put all into a function except the optimizer. . def calc_grad(xb, yb, model): preds = model(xb) loss = mnist_loss(preds, yb) loss.backward() . calc_grad(batch, train_y[:4], linear1) weights.grad.mean(),bias.grad . (tensor(-0.0021), tensor([-0.0138])) . . Warning: if you do it twice results are change. . calc_grad(batch, train_y[:4], linear1) weights.grad.mean(),bias.grad . (tensor(-0.0031), tensor([-0.0207])) . weights.grad.zero_() bias.grad.zero_(); . def train_epoch(model, lr, params): for xb,yb in dl: calc_grad(xb, yb, model) for p in params: p.data -= p.grad*lr p.grad.zero_() . little conversion to our results, it&#39;s important because we need to understand that what our model says about the numbers(three or not three) . (preds&gt;0.0).float() == train_y[:4] . tensor([[ True], [ True], [False], [ True]]) . def batch_accuracy(xb, yb): preds = xb.sigmoid() correct = (preds&gt;0.5) == yb return correct.float().mean() . . this is training accuracy . batch_accuracy(linear1(batch), train_y[:4]) . tensor(0.7500) . this is for validation for all set . def validate_epoch(model): accs = [batch_accuracy(model(xb), yb) for xb,yb in valid_dl] return round(torch.stack(accs).mean().item(), 4) . validate_epoch(linear1) . 0.5136 . Training . one epochs of training . lr = 1. params = weights,bias train_epoch(linear1, lr, params) validate_epoch(linear1) . 0.7121 . then more . for i in range(20): train_epoch(linear1, lr, params) print(validate_epoch(linear1), end=&#39; &#39;) . 0.8656 0.9203 0.9457 0.9549 0.9593 0.9623 0.9652 0.9666 0.9681 0.9705 0.9706 0.9711 0.972 0.973 0.9735 0.9735 0.974 0.9745 0.9755 0.9755 . Optimizer . Let&#39;s start creating our model with Pytorch instead of our &quot;linear1&quot; function. Pytorch also creates parameters like our init_params function. . linear_model = nn.Linear(28*28,1) . w,b = linear_model.parameters() . w.shape, b.shape . (torch.Size([1, 784]), torch.Size([1])) . Custom optimizer . class BasicOptim: def __init__(self,params,lr): self.params,self.lr = list(params),lr def step(self, *args, **kwargs): for p in self.params: p.data -= p.grad.data * self.lr def zero_grad(self, *args, **kwargs): for p in self.params: p.grad = None . opt = BasicOptim(linear_model.parameters(), lr) . new training fuction will be . def train_epoch(model): for xb,yb in dl: calc_grad(xb, yb, model) opt.step() opt.zero_grad() . validate_epoch(linear_model) . 0.4078 . def train_model(model, epochs): for i in range(epochs): train_epoch(model) print(validate_epoch(model), end=&#39; &#39;) . train_model(linear_model, 20) . 0.4932 0.8193 0.8418 0.9136 0.9331 0.9477 0.9555 0.9629 0.9658 0.9673 0.9697 0.9717 0.9736 0.9751 0.9761 0.9761 0.9775 0.9775 0.9785 0.9785 . Fastai&#39;s SDG class . instead of using &quot;BasicOptim&quot; class we can use fastai&#39;s SGD class . linear_model = nn.Linear(28*28,1) opt = SGD(linear_model.parameters(), lr) train_model(linear_model, 20) . 0.4932 0.7808 0.8623 0.9185 0.9365 0.9521 0.9575 0.9638 0.9658 0.9678 0.9707 0.9726 0.9741 0.9751 0.9761 0.9765 0.9775 0.978 0.9785 0.9785 . Just remove the &quot;train_model&quot; at this time and use fastai&#39;s &quot;Learner.fit&quot; Before using Learner first we need to pass our trainig and validation data into &quot;Dataloaders&quot; not &quot;dataloader&quot; . Fastai&#39;s Dataloaders . dls = DataLoaders(dl, valid_dl) . learn = Learner(dls, nn.Linear(28*28,1), opt_func=SGD, loss_func=mnist_loss, metrics=batch_accuracy) . FastAi&#39;s Fit . learn.fit(10, lr=lr) . epoch train_loss valid_loss batch_accuracy time . 0 | 0.637166 | 0.503575 | 0.495584 | 00:00 | . 1 | 0.562232 | 0.139727 | 0.900393 | 00:00 | . 2 | 0.204552 | 0.207935 | 0.806183 | 00:00 | . 3 | 0.088904 | 0.114767 | 0.904809 | 00:00 | . 4 | 0.046327 | 0.081602 | 0.930324 | 00:00 | . 5 | 0.029754 | 0.064530 | 0.944553 | 00:00 | . 6 | 0.022963 | 0.054135 | 0.954858 | 00:00 | . 7 | 0.019966 | 0.047293 | 0.961236 | 00:00 | . 8 | 0.018464 | 0.042515 | 0.965162 | 00:00 | . 9 | 0.017573 | 0.039011 | 0.966634 | 00:00 | . Adding a Nonlinearity . The basic idea is that by using more linear layers, we can have our model do more computation, and therefore model more complex functions. But there&#39;s no point just putting one linear layer directly after another one, because when we multiply things together and then add them up multiple times, that could be replaced by multiplying different things together and adding them up just once! That is to say, a series of any number of linear layers in a row can be replaced with a single linear layer with a different set of parameters. (From Fastbook) . Amazingly enough, it can be mathematically proven that this little function can solve any computable problem to an arbitrarily high level of accuracy, if you can find the right parameters for w1 and w2 and if you make these matrices big enough. For any arbitrarily wiggly function, we can approximate it as a bunch of lines joined together; to make it closer to the wiggly function, we just have to use shorter lines. This is known as the universal approximation theorem._ The three lines of code that we have here are known as layers. The first and third are known as linear layers, and the second line of code is known variously as a nonlinearity, or activation function.(From Fastbook) . simple_net = nn.Sequential( nn.Linear(28*28,30), nn.ReLU(), nn.Linear(30,1) ) . learn = Learner(dls, simple_net, opt_func=SGD, loss_func=mnist_loss, metrics=batch_accuracy) . learn.fit(40, 0.1) . epoch train_loss valid_loss batch_accuracy time . 0 | 0.303284 | 0.398378 | 0.511776 | 00:00 | . 1 | 0.142384 | 0.221517 | 0.817959 | 00:00 | . 2 | 0.079702 | 0.112610 | 0.917076 | 00:00 | . 3 | 0.052855 | 0.076474 | 0.942100 | 00:00 | . 4 | 0.040301 | 0.059791 | 0.958783 | 00:00 | . 5 | 0.033824 | 0.050389 | 0.964181 | 00:00 | . 6 | 0.030075 | 0.044483 | 0.966143 | 00:00 | . 7 | 0.027629 | 0.040465 | 0.966634 | 00:00 | . 8 | 0.025865 | 0.037553 | 0.969578 | 00:00 | . 9 | 0.024499 | 0.035336 | 0.971541 | 00:00 | . 10 | 0.023391 | 0.033579 | 0.972522 | 00:00 | . 11 | 0.022467 | 0.032142 | 0.973994 | 00:00 | . 12 | 0.021679 | 0.030936 | 0.973994 | 00:00 | . 13 | 0.020997 | 0.029901 | 0.974975 | 00:00 | . 14 | 0.020398 | 0.028998 | 0.974975 | 00:00 | . 15 | 0.019869 | 0.028198 | 0.975957 | 00:00 | . 16 | 0.019395 | 0.027484 | 0.976448 | 00:00 | . 17 | 0.018966 | 0.026841 | 0.976938 | 00:00 | . 18 | 0.018577 | 0.026259 | 0.977429 | 00:00 | . 19 | 0.018220 | 0.025730 | 0.977429 | 00:00 | . 20 | 0.017892 | 0.025244 | 0.978410 | 00:00 | . 21 | 0.017588 | 0.024799 | 0.979882 | 00:00 | . 22 | 0.017306 | 0.024388 | 0.979882 | 00:00 | . 23 | 0.017042 | 0.024008 | 0.980373 | 00:00 | . 24 | 0.016794 | 0.023656 | 0.980864 | 00:00 | . 25 | 0.016561 | 0.023328 | 0.980864 | 00:00 | . 26 | 0.016341 | 0.023022 | 0.980864 | 00:00 | . 27 | 0.016133 | 0.022737 | 0.981845 | 00:00 | . 28 | 0.015935 | 0.022470 | 0.981845 | 00:00 | . 29 | 0.015746 | 0.022221 | 0.981845 | 00:00 | . 30 | 0.015566 | 0.021988 | 0.982336 | 00:00 | . 31 | 0.015395 | 0.021769 | 0.982336 | 00:00 | . 32 | 0.015231 | 0.021565 | 0.982826 | 00:00 | . 33 | 0.015076 | 0.021371 | 0.982826 | 00:00 | . 34 | 0.014925 | 0.021190 | 0.982826 | 00:00 | . 35 | 0.014782 | 0.021018 | 0.982826 | 00:00 | . 36 | 0.014643 | 0.020856 | 0.982826 | 00:00 | . 37 | 0.014510 | 0.020703 | 0.982826 | 00:00 | . 38 | 0.014382 | 0.020558 | 0.982826 | 00:00 | . 39 | 0.014258 | 0.020420 | 0.982826 | 00:00 | . recorder is a fast ai method . plt.plot(L(learn.recorder.values).itemgot(2)); . Last value . learn.recorder.values[-1][2] . 0.982826292514801 . GOING DEEPER . why deeper if it is two and a nonlinear between them is enough . We already know that a single nonlinearity with two linear layers is enough to approximate any function. So why would we use deeper models? The reason is performance. With a deeper model (that is, one with more layers) we do not need to use as many parameters; it turns out that we can use smaller matrices with more layers, and get better results than we would get with larger matrices, and few layers. . dls = ImageDataLoaders.from_folder(path) learn = cnn_learner(dls, resnet18, pretrained=False, loss_func=F.cross_entropy, metrics=accuracy) learn.fit_one_cycle(1, 0.1) . epoch train_loss valid_loss accuracy time . 0 | 0.089727 | 0.011755 | 0.997056 | 00:13 | . &lt;/div&gt; .",
            "url": "https://niyazikemer.com/fastbook/2021/07/16/chapter-4.html",
            "relUrl": "/fastbook/2021/07/16/chapter-4.html",
            "date": " • Jul 16, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://niyazikemer.com/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://niyazikemer.com/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://niyazikemer.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://niyazikemer.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}